#!/usr/bin/env python3

import sys
import random
from datetime import datetime
import logging
import platform
import json
import struct
import getpass
import traceback
import os
import time
import subprocess
import threading

match platform.system().lower():
    case "windows":
        SYSTEM_OS = "windows"
    case "darwin":
        SYSTEM_OS = "macos"
    case _:
        SYSTEM_OS = "unsupported"

PROTOCOL_VERSION = 2
CONFIG_PATH = "citadel-config.json"
PERIODIC_CHECK_FREQUENCY = 60 * 60 # every hour
DEFAULT_OSQUERY_PATH = "C:\\Program Files\\osquery\\osqueryi.exe" if SYSTEM_OS == "windows" else "/usr/local/bin/osqueryi"
DEFAULT_UPTIME_DAYS = 30
REPORT_TIMEOUT = 60   # seconds

osqueryPath = DEFAULT_OSQUERY_PATH
config = {}
username = getpass.getuser()
logger = None

def log(event):
    event['id'] = str(event['id'])
    event['user'] = username
    level = event.get('browseragent', { }).get('level') or "ERROR"
    message = 'browser agent : ' + json.dumps(event)

    if level == "DEBUG" or level == "TRACE":
        logger.debug(message)
    elif level == "INFO":
        logger.info(message)
    elif level == "WARN":
        logger.warning(message)
    elif level == "ERROR":
        logger.error(message)
    elif level == "ALERT":
        logger.critical(message)
    else:
        logger.critical("Unknown log level: %s", message)

def createEvent(event, result, level, description):
    return {
        "timestamp" : datetime.now().isoformat(),
        "id" : random.randint(-sys.maxsize, sys.maxsize),
        "browseragent" : {
            "event" : event,
            "level": level,
            "result" : result,
            "description": description
        }
    }

def warning(msg):
    event = createEvent("messaging warning", "messaging warning", "WARN", msg)
    log(event)

def error(msg):
    event = createEvent("messaging error", "messaging error", "WARN", msg)
    log(event)
    print(msg)
    time.sleep(60 * 60)     # keep running so that the browser does not start immediately
    sys.exit(1)

def exception(msg, e):
    tb = traceback.TracebackException.from_exception(e)
    frame = list(tb.stack)[-1]
    warning(f"{msg} : {type(e).__name__} at {frame.filename}:{frame.lineno} in {frame.name}")

# create a platform-dependant logger
if SYSTEM_OS == 'macos':
    import syslog

    class SyslogHandler(logging.Handler):

        LEVEL_MAP = {
            logging.DEBUG: syslog.LOG_DEBUG,
            logging.INFO: syslog.LOG_INFO,
            logging.WARNING: syslog.LOG_WARNING,
            logging.ERROR: syslog.LOG_ERR,
            logging.CRITICAL: syslog.LOG_ALERT,
        }

        def emit(self, record):
            try:
                message = self.format(record)
                level = self.LEVEL_MAP.get(record.levelno, syslog.LOG_INFO)
                syslog.syslog(level, message)
            except Exception:
                self.handleError(record)

    logger = logging.getLogger('BrowserAgentLogger')
    logger.setLevel(logging.DEBUG)
    syslog_handler = SyslogHandler()
    formatter = logging.Formatter('%(message)s')
    syslog_handler.setFormatter(formatter)
    logger.addHandler(syslog_handler)

elif SYSTEM_OS == 'windows':
    from logging.handlers import NTEventLogHandler

    class CustomWindowsHandler(NTEventLogHandler):
        LEVEL_MAP = {
            logging.DEBUG: logging.DEBUG,
            logging.INFO: logging.INFO,
            logging.WARNING: logging.WARNING,
            logging.ERROR: logging.WARNING,
            logging.CRITICAL: logging.WARNING,
        }

        def emit(self, record):
            record.levelno = self.LEVEL_MAP.get(record.levelno, logging.INFO)
            record.levelname = logging.getLevelName(record.levelno)

            super().emit(record)

    logger = logging.getLogger('BrowserAgentLogger')
    logger.setLevel(logging.DEBUG)
    event_log_handler = CustomWindowsHandler('Browser Agent')
    formatter = logging.Formatter('%(message)s')
    event_log_handler.setFormatter(formatter)
    logger.addHandler(event_log_handler)

else:
    error("unsupported OS")


def checkFileRights(path):
    if not os.path.isfile(path):
        return

    if SYSTEM_OS == "macos":
        stat_info = os.stat(path)
        if stat_info.st_uid != 0:
            error(f"file '{path}' is not owned by root (uid=0).")
        if stat_info.st_gid != 0:
            error(f"file '{path}' is not owned by group wheel (gid=0).")
        if stat_info.st_mode & 0o002:
            error(f"file '{path}' is writable by others (world-writable).")

    elif SYSTEM_OS == "windows":
        import win32security
        import win32con

        sd = win32security.GetFileSecurity(path, win32security.OWNER_SECURITY_INFORMATION | win32security.DACL_SECURITY_INFORMATION)
        owner_sid = sd.GetSecurityDescriptorOwner()
        name, dom, acc_type = win32security.LookupAccountSid(None, owner_sid)
        if name not in ("Administrators", "SYSTEM"):
            error(f"file '{path}' is not owned by Administrators or SYSTEM. (Owner: {name})")

        # Check for "Everyone" write access
        dacl = sd.GetSecurityDescriptorDacl()
        everyone, _, _ = win32security.LookupAccountName(None, "Everyone")

        for i in range(dacl.GetAceCount()):
            ace = dacl.GetAce(i)
            ace_sid = ace[2]
            access_mask = ace[1]

            if ace_sid == everyone and (access_mask & (win32con.FILE_GENERIC_WRITE | win32con.GENERIC_WRITE)):
                error(f"file '{path}' is writable by Everyone (world-writable).")
    else:
        error("unsupported OS")


def readMessage():
    raw_length = sys.stdin.buffer.read(4)

    if len(raw_length) == 0:
        sys.exit(0)

    messageLength = struct.unpack('@I', raw_length)[0]
    message = sys.stdin.buffer.read(messageLength).decode('utf-8')
    message = json.loads(message)

    return message


stdout_lock = threading.Lock()

def sendMessage(type, message = None):
    try:
        message = {'type': type, 'version': PROTOCOL_VERSION, 'message': message}
        message_json = json.dumps(message)

        encoded_message = message_json.encode('utf-8')
        message_length = struct.pack('<I', len(encoded_message))

        with stdout_lock:
            sys.stdout.buffer.write(message_length)
            sys.stdout.buffer.write(encoded_message)
            sys.stdout.flush()

    except Exception as e:
        exception(f"unable to send message of type '${type}' to agent", e)

def readJsonFile(path):
    try:
        checkFileRights(path)
        with open(path, 'r', encoding='utf-8') as file:
            return json.load(file)
    except FileNotFoundError:
        return None
    except json.JSONDecodeError as e:
        error(f"config file '{path}' does not contain valid JSON. Reason: {e.msg} at line {e.lineno}, column {e.colno}.")
    except Exception as e:
        error(f"unexpected error {e} occurred while reading config file '{path}'")


last_config_change = None

def loadConfig():
    global last_config_change, config, osqueryPath

    try:
        mtime = os.path.getmtime(CONFIG_PATH)
    except FileNotFoundError:
        mtime = -1

    if mtime != last_config_change:
        if last_config_change:
            sendMessage("restart")
        else:
            config = readJsonFile(CONFIG_PATH) or { }
            sendMessage("config", config)

        last_config_change = mtime

        oqsueryPath = config.get("devicetrust", {}).get("osqueryPath", {}).get(SYSTEM_OS, DEFAULT_OSQUERY_PATH)



def osquery(query):
    escapedUsername = username.replace('\\', '\\\\').replace("'", "\\'")
    query = query.replace("{{username}}", escapedUsername)
    proc = subprocess.run([osqueryPath, '--json', '--', query], capture_output=True, text=True)
    if proc.returncode != 0:
        raise Exception(proc.stderr)
    return json.loads(proc.stdout)

def loadControlPacks():
    controlsSpec = config.get("devicetrust", {}).get("controls", {}).get("packs", [])
    controlsSpec.insert(0, {"type": "windows", "path": "controls/windows-default.json"})
    controlsSpec.insert(0, {"type": "macos",  "path": "controls/macos-default.json"})

    controls = {}
    filteredSpecs = [c for c in controlsSpec if c.get("type") == SYSTEM_OS]
    for cSpec in filteredSpecs:
        packPath = cSpec.get("path")
        try:
            controlPack = readJsonFile(packPath)

            if not controlPack:
                raise FileNotFoundError(packPath)

            controls.update(controlPack.get("controls", {}))
        except Exception as e:
            exception(f"failed to load control pack {packPath}", e)

    return controls

def checkSystemUpdated():
    report = { }

    try:
        if SYSTEM_OS == "macos":
            result = subprocess.run(["softwareupdate", "--list"], capture_output=True, text=True, check=True)
            out = result.stdout + result.stderr
            isUpdated = "No new software available" in out
            addReport(report, "SystemUpdated", [] if isUpdated else [''])

        elif SYSTEM_OS == "windows":
            errors = getErrors("SELECT '' AS error FROM windows_security_center WHERE autoupdate != 'Good'")
            addReport(report, "SystemUpdated", errors)

        else:
            raise Exception("unsupported OS")
    except Exception as e:
        exception("failed to check OS updates", e)

    return report

def reportBrowsers():
    try:
        if SYSTEM_OS == "macos":
            browser_ids = [
                'com.google.Chrome',
                'org.mozilla.firefox',
                'com.brave.Browser',
                'com.microsoft.edgemac',
                'com.operasoftware.Opera'
            ]
            in_clause = ', '.join(f"'{bid}'" for bid in browser_ids)
            query = (f"SELECT bundle_identifier AS brand, path, bundle_short_version AS version FROM apps WHERE bundle_identifier IN ({in_clause}) AND last_opened_time > 0;")
            return list(osquery(query))

        elif SYSTEM_OS == "windows":
            browser_ids = [
                'Google Chrome',
                'Mozilla Firefox',
                'Brave',
                'Microsoft Edge',
                'Opera'
            ]
            in_clause = ', '.join(f"'{bid}'" for bid in browser_ids)
            query = (f"SELECT name AS brand, install_location AS path, version FROM programs WHERE name IN ({in_clause});")
            return list(osquery(query))

        else:
            return []

    except Exception as e:
        exception("Failed to perform browser check", e)


def checkUptime():
    report = { }

    try:
        maxUpDays = config.get("devicetrust", {}).get("controls", {}).get("maxUptimeDays", DEFAULT_UPTIME_DAYS)
        errors = getErrors(f"SELECT '' AS error FROM uptime WHERE total_seconds / 60 / 60 / 24 > {maxUpDays};")

        addReport(report, "MaxUptime", errors)
    except Exception as e:
        exception("Failed to check uptime", e)

    return report

def checkBlacklist(type, forbiddenLabel, requiredLabel, query):
    report = { }

    try:
        blacklistConfig = config.get("devicetrust", {}).get(type, {})
        required = set(blacklistConfig.get("required", []))
        forbidden = set(blacklistConfig.get("forbidden", []))

        detected = set()
        results = osquery(query)
        values = (v for row in results for v in row.values() if v)
        detected.update(values)

        addReport(report, forbiddenLabel, sorted(list(forbidden & detected)))
        addReport(report, requiredLabel, sorted(list(required - detected)))
    except Exception as e:
        exception(f"failed to list {type}", e)

    return report


def checkApplications():
    if SYSTEM_OS == "macos":
        query = "SELECT name, bundle_executable, bundle_identifier, bundle_name, display_name, category FROM apps;"
    elif SYSTEM_OS == "windows":
        query = "SELECT name FROM programs;"
    else:
        warning("unsupported OS")
        return { }

    return checkBlacklist("applications", "ForbiddenApplications", "MissingApplications", query)

def checkProcesses():
    query = "SELECT name FROM processes;"
    return checkBlacklist("processes", "ForbiddenProcesses", "MissingProcesses", query)

def addReport(report, control, errors):
    passed = len(errors) == 0
    report[control] = {
        "name": control,
        "passed" : passed,
        "timestamp": datetime.now().isoformat()
    }

    if not passed:
        errors = { e for e in errors if e != "" }
        report[control]["errors"] = list(errors)

    return report

def getErrors(query):
    queryResults = osquery(query)
    errors = [ d['error'] if 'error' in d else str(d) for d in queryResults ]
    return errors


last_devicereport = 0
devicereport_running = False

def generateAndSendReport():
    global devicereport_running, last_devicereport
    now = time.time()
    if devicereport_running and now - last_devicereport < REPORT_TIMEOUT:
        return

    if not os.path.isfile(osqueryPath):
        warning(f"device trust report not generated, osquery not found at '{osqueryPath}'")
        return

    try:
        devicereport_running = True
        last_devicereport = now
        report = generateReport()
        sendMessage("devicetrust", report)
    except Exception as e:
        exception("failed to generate report", e)
    finally:
        devicereport_running = False


def generateReport():
    results = { }
    definitions = loadControlPacks()
    for controlName, controlDefinition in definitions.items():
        try:
            queryStr = controlDefinition.get("query")

            if queryStr:
                errors = getErrors(queryStr)
                addReport(results, controlName, errors)
        except Exception as e:
            exception(f"query '{controlName}' failed", e)

    results.update(checkApplications())
    results.update(checkProcesses())
    results.update(checkUptime())
    results.update(checkSystemUpdated())

    return { "controls": { "definitions":  definitions, "results": results }, "browsers": reportBrowsers() }

def periodicChecksWorker():
    while True:
        try:
            loadConfig()
            generateAndSendReport()
        except Exception as e:
            exception("error during periodic check", e)

        time.sleep(PERIODIC_CHECK_FREQUENCY)

def main():
    loadConfig()

    threading.Thread(target=periodicChecksWorker, daemon=True).start()

    while True:
        try:
            message = readMessage()
            messageType = message.get('type')

            match messageType:
                case 'event':
                    log(message.get('message'))
                case 'devicetrust':
                    threading.Thread(target=generateAndSendReport(), daemon=True).start()
                case _:
                    warning(f"agent sent unexpected message type '{messageType}'")

        except Exception as e:
            exception("error while reading event", e)

if __name__ == "__main__":
    main()