#!/usr/bin/env python3

import sys
import random
from datetime import datetime
import logging
import platform
import json
import struct
import getpass
import hashlib
import traceback

PROTOCOL_VERSION = 1
username = getpass.getuser()

logger = None

def log(event):
    event['id'] = str(event['id'])
    event['user'] = username
    level = event.get('browseragent', { }).get('level') or "ERROR"
    message = 'browser agent : ' + json.dumps(event)

    if level == "DEBUG" or level == "TRACE":
        logger.debug(message)
    elif level == "INFO":
        logger.info(message)
    elif level == "WARN":
        logger.warning(message)
    elif level == "ERROR":
        logger.error(message)
    elif level == "ALERT":
        logger.critical(message)
    else:
        logger.critical("Unknown log level: %s", message)

def createEvent(event, result, level, description):
    return {
        "timestamp" : datetime.now().isoformat(),
        "id" : random.randint(-sys.maxsize, sys.maxsize),
        "event" : event,
        "result" : result,
        "level": level,
        "description": description
    }

def warning(msg):
    event = createEvent("messaging warning", "messaging warning", "WARN", msg)
    log(event)

def error(msg):
    event = createEvent("messaging error", "messaging error", "ERROR", msg)
    log(event)
    sys.exit(1)

# create a platform-dependant logger
current_os = platform.system()

if current_os == 'Darwin':  # macOS
    import syslog

    class SyslogHandler(logging.Handler):

        LEVEL_MAP = {
            logging.DEBUG: syslog.LOG_DEBUG,
            logging.INFO: syslog.LOG_INFO,
            logging.WARNING: syslog.LOG_WARNING,
            logging.ERROR: syslog.LOG_ERR,
            logging.CRITICAL: syslog.LOG_ALERT,
        }

        def emit(self, record):
            try:
                message = self.format(record)
                level = self.LEVEL_MAP.get(record.levelno, syslog.LOG_INFO)
                syslog.syslog(level, message)
            except Exception:
                self.handleError(record)

    logger = logging.getLogger('BrowserAgentLogger')
    logger.setLevel(logging.DEBUG)
    syslog_handler = SyslogHandler()
    formatter = logging.Formatter('%(message)s')
    syslog_handler.setFormatter(formatter)
    logger.addHandler(syslog_handler)

elif current_os == 'Windows':
    from logging.handlers import NTEventLogHandler

    class CustomWindowsHandler(NTEventLogHandler):
        LEVEL_MAP = {
            logging.DEBUG: logging.DEBUG,
            logging.INFO: logging.INFO,
            logging.WARNING: logging.WARNING,
            logging.ERROR: logging.WARNING,
            logging.CRITICAL: logging.WARNING,
        }

        def emit(self, record):
            record.levelno = self.LEVEL_MAP.get(record.levelno, logging.INFO)
            record.levelname = logging.getLevelName(record.levelno)

            super().emit(record)


    logger = logging.getLogger('BrowserAgentLogger')
    logger.setLevel(logging.DEBUG)
    event_log_handler = CustomWindowsHandler('Browser Agent')
    formatter = logging.Formatter('%(message)s')
    event_log_handler.setFormatter(formatter)
    logger.addHandler(event_log_handler)

else:
    error("unsupported OS")



def readMessage(type):
    raw_length = sys.stdin.buffer.read(4)

    if len(raw_length) == 0:
        sys.exit(0)
    
    messageLength = struct.unpack('@I', raw_length)[0]
    message = sys.stdin.buffer.read(messageLength).decode('utf-8')
    message = json.loads(message)

    if message.get('type') != type:
        warning(f"agent sent unexpected message type '{ message.get('type') }' instead of '{ type }' : { message }")

    return message.get('message')


def sendMessage(type, message):
    try:
        message = {'type': type, 'version': PROTOCOL_VERSION, 'message': message}
        message_json = json.dumps(message)

        encoded_message = message_json.encode('utf-8')
        message_length = struct.pack('<I', len(encoded_message))

        sys.stdout.write(message_length.decode('utf-8'))
        sys.stdout.write(message_json)
        sys.stdout.flush()
    except Exception as e:
        error(f"unable to send message to agent: {message}")



def hashDownload(event):
    filename = event.get('browseragent', {}).get('value', {}).get('download', {}).get('filename')
    if not filename:
        return

    sha256_hash = hashlib.sha256()
    with open(filename, "rb") as f:
        for byte_block in iter(lambda: f.read(4096), b""):
            sha256_hash.update(byte_block)
    hash = sha256_hash.hexdigest()
    event['browseragent']['value']['download']['sha256'] = hash

def readJsonFile(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            return json.load(file)
    except FileNotFoundError:
        return None
    except json.JSONDecodeError:
        error(f"config file '{file_path}' does not contain valid JSON.")
    except Exception as e:
        error(f"unexpected error {e} occurred while reading config '{file_path}'")

def sendConfig(config):
    sendMessage("config", config or { })

    confirmation = readMessage("config")
    if confirmation != 'ok':
        warning(f"agent did not confirm config : {confirmation}")


def main():
    config = readJsonFile("citadel-browser-agent.json")
    sendConfig(config)

    while True:
        try:
            event = readMessage("event")

#            if event['browseragent']['event'] == "download" and event['browseragent']['result'] == "download completed":
#                hashDownload(event)

            log(event)
        except Exception as e:
            error(traceback.format_exc())

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        error(traceback.format_exc())